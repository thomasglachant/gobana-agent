#
# Agent configuration
#
## Debug mode enabled ? (optional, default: false)
# debug: false 

## Name of your application (required)
application: "MyApp"

## Name of your server (optional)
# server: "localhost"   

#
# Parsers are used to read and normalize logs 
# It permit to have a uniform format, usable to alerting and analyses.
# 
# There is two kinds of parsers : 
# - `regex` : parse a log line using a regex to capture fields value.
# - `json` : parse a log line using a json format to capture and map fields value.
parsers: #(required)

#    # Json parser example
#    -   name: "example_json" # ID of the parser, used for alerting and storage (required, must be unique)
#        mode: "json" # enable json mode (required for json parser)
#        # You must specify the fields you want to capture (required)
#        fields: # mapping between localField to (required)
#            myLocalField: "my_field_in_json"
#            date: "datetime"
#            level: "level_name"
#            message: "message"
#            user: "extra.user" # separate fields by "." to capture inner fields
#        # You can specify a date format to extract date from a field (optional)
#        date_extract: #  (optional)
#            field: "date" # field name (optional)
#            format: "2006-01-02T15:04:05.999999999Z07:00" # date format (optional)
#        # File list to include (required)
#        # can contain "*" to match pattern or "**" to match all files.  
#        files_included:
#            - "/var/log/symfony/*.log"
#            - "/var/log/**/*.log"
#        # File list to exclude (optional)
#        # can contain "*" to match pattern or "**" to match all files.
#        files_excluded:
#            - "/var/log/symfony/prod.deprecations.log"

#    # Regex parser example
#    -   name: "example_regex" # ID of the parser, used for alerting and storage (required, must be unique)
#        mode: "regex"  # enable regex mode (required for regex parser)
#        regex_pattern: "\\[(?P<date>.+)\\] [a-zA-Z0-9_\\-]+.(?P<level>[a-zA-Z0-9]+): (?P<message>.*)"  # regex pattern with group name which identify fields to capture (required for regex parser)
#        # You can specify a date format to extract date from a field (optional)
#        date_extract: # (optional)
#            field: "date" # field name (optional)
#            format: "2006-01-02T15:04:05.999999999Z07:00" # date format (optional)
#        # File list to include (required)
#        # can contain "*" to match pattern or "**" to match all files.  
#        files_included:
#            - "/var/log/symfony/*.log"
#            - "/var/log/**/*.log"
#        # File list to exclude (optional)
#        # can contain "*" to match pattern or "**" to match all files.
#        files_excluded:
#            - "/var/log/symfony/prod.deprecations.log"

#
# Alerts are used to send notifications to users.
#
alerts: # (optional)
    frequency: 5 # Frequency of alerting (in minutes)
    
    # Triggers define conditions that must be met to send an alert.
    triggers:
#        -   name: "critical detected" # ID of the trigger, displayed in notification (required)
#            # List of conditions that must be VALID to trigger (required)
#            # "field" must contain the name of a field captured by the parser or a special field from the following list :
#            # - "_parser" : name of used parser
#            # - "_filename" : filename where current log is found
#            # "operator" must contain one of the following operators :
#            # - "is" : if field is equal to value (no case sensitive)
#            # - "is_not" : if field is not equal to value (no case sensitive)
#            # - "contains" : if field contains value (no case sensitive)
#            # - "not_contains" : if field not contains value (no case sensitive)
#            # - "start_with" : if field start with value (no case sensitive)
#            # - "not_start_with" : if field not start with value (no case sensitive)
#            # - "match_regex" :  if field match to pattern
#            values:
#                - { field: "_parser", operator: "is", value: "example_json" }
#                - { field: "_filename", operator: "is_not", value: "/var/log/symfony/dev.log" }
#                - { field: "level", operator: "is", value: "CRITICAL" }
#                - { field: "level", operator: "contains", value: "TICAL" }
#                - { field: "level", operator: "not_contains", value: "INFO" }
#                - { field: "level", operator: "start_with", value: "CRIT" }
#                - { field: "level", operator: "not_start_with", value: "WARN" }
#                - { field: "message", operator: "match_regex", value: ".*Error.*" }

# List of recipients to send notifications to
# "kind" must contain one of the following types :
# - "email" : send notification using smtp to an email address
# - "slack_webhooks" : send slack message using a webhook
    recipients: # (required)
#        -   kind: "email" # (required)
#            recipient: "user@localhost.local"
#        -   kind: "slack_webhook" # (required)
#            recipient: "https://hooks.slack.com/services/XXXX/XXXXX/XXXXX"

#
# Centralized storage of logs
#
emitter:
    ## Is cloud storage enabled ? (optional)
    enabled: false
    
    ## Workspace ID (required if enabled)
    workspace: "myapplication"
    
    ## Server ip or domain (required if enabled)
    server: "localhost"
    
    ## Server port (optional)
    # port: 59302
    
    ## Server secret (required if enabled)
    secret: "secret"

#
# SMTP configuration (optional but required for email notification)
#
smtp:
    ## Smtp port (required)
    host: "localhost"
    
    ## Smtp port (optional)
    # port: 25
    
    ## Smtp username (optional)
    # username: ""
    
    ## Smtp password (optional)
    # password: ""
    
    ## Is Smtp encryption enabled? (optional)
    # ssl_enabled: false
    
    ## Email of the email sender (required)
    # from_email: "spooter@localhost" 
    
    ## Name of the email sender (required)
    # from_name: "Spooter" 
